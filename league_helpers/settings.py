"""
Django settings for league_helpers project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

import dotenv
from django.core.exceptions import ImproperlyConfigured

from datetime import timedelta

import dj_database_url


def get_from_env(key: str, default=None, raise_on_missing=False, lower_case=False) -> str:
    val = os.getenv(key, default)

    if raise_on_missing and val is None:
        raise ImproperlyConfigured(f"Required key: {key} missing.")

    return val.lower() if lower_case and val is not None else val


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DOTENV_PATH = os.path.join(BASE_DIR, ".env")
SECRETS_DOTENV_PATH = os.path.join(BASE_DIR, "secrets.env")

ENV = get_from_env("ENV", default="development", lower_case=True)

if os.path.exists(DOTENV_PATH) and ENV == "development":
    dotenv.load_dotenv(DOTENV_PATH, verbose=True, override=True)

if os.path.exists(SECRETS_DOTENV_PATH) and ENV == "development":
    dotenv.load_dotenv(SECRETS_DOTENV_PATH, verbose=True, override=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_from_env("SECRET_KEY", raise_on_missing=True)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if ENV == "development" else False

ALLOWED_HOSTS = []

if ENV == "production":
    ALLOWED_HOSTS.append("league-in-houses.herokuapp.com")


def production_domain() -> str:
    return get_from_env("PRODUCTION_DOMAIN", None, raise_on_missing=True)


# ========== Application definition ==========

INSTALLED_APPS = [
    # "django.contrib.admin",
    "league_helpers.apps.LeagueHelpersAdminConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "rest_framework",
    "corsheaders",
    # TODO: Setup cron to run flush
    "rest_framework_simplejwt.token_blacklist",
    "api",
    "users",
    "summoners",
    "rankings",
    "roles",
    "matchmaker",
    "valorant_accounts"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "league_helpers.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "league_helpers.wsgi.application"

AUTH_USER_MODEL = "users.User"

# ========== Logging ==========
# https://docs.djangoproject.com/en/3.1/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {
        "level": "DEBUG",
        "handlers": [
            "console",
        ],
    },
    "formatters": {
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django.db.backends": {
            "level": "DEBUG",
            "formatter": "simple",
            "propagate": True,
        },
    },
}

# ========== Database ==========
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": get_from_env("DATABASE_NAME", default="in_houses"),
        "USER": get_from_env("DATABASE_USER", raise_on_missing=True),
        "PASSWORD": get_from_env("DATABASE_PASSWORD", raise_on_missing=True),
        "HOST": get_from_env("DATABASE_HOST", raise_on_missing=True),
        "PORT": get_from_env("DATABASE_PORT", raise_on_missing=True),
    }
}

if ENV == "production":
    DATABASES['default'] = dj_database_url.config(conn_max_age=600)


# ========== Password validation ==========
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# ========== Internationalization ==========
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# ========== Static files (CSS, JavaScript, Images) ==========
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

# ========== Django Rest Framework ==========

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "EXCEPTION_HANDLER": "api.utils.custom_exception_handler",
}

# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "USER_ID_FIELD": "username",
    "USER_ID_CLAIM": "user_id",
}

# ========== Django CORS ==========
# https://github.com/adamchainz/django-cors-headers#configuration

DEV_DOMAINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

PROD_DOMAINS = [
    "https://league-in-houses-ui.herokuapp.com"
]

CORS_ALLOWED_ORIGINS = DEV_DOMAINS if ENV == "development" else PROD_DOMAINS


# ========== Riot API ==========

RIOT_API_KEY = get_from_env("RIOT_API_KEY", raise_on_missing=True)


# ========== Miscellaneous ==========

REGISTER_TOKEN = get_from_env("REGISTER_TOKEN", raise_on_missing=True)
